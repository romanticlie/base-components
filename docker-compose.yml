version: "3"

services:
  ### Nginx ###
  nginx:
    image: nginx:1.24
    container_name: base-components-nginx
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    expose:
      - "80"
      - "443"
    volumes:
      - "${NGINX_DIR}/conf/nginx.conf:/etc/nginx/nginx.conf:rw"
      - "${NGINX_DIR}/conf/conf.d:/etc/nginx/conf.d/:rw"
      - "${NGINX_DIR}/logs:/var/log/nginx/:rw"
      - "${NGINX_CODE_ROOT}:/opt/case:rw"
    environment:
      TZ: "$TZ" 
    # healthcheck:
    #   test: ["CMD", "curl" ,"-f", "http://localhost"]
    #   interval: 60s
    #   timeout: 3s
    #   retries: 3
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.2 
  ### MySQL ###
  mysql:
    image: base-components-mysql:1.0
    build:
      context: "${MYSQL_DIR}/build"
      dockerfile: Dockerfile
    container_name: base-components-mysql
    ports:
      - "${MYSQL_PORT}:3306"
    expose:
      - "3306"
    volumes:
      - "${MYSQL_DIR}/conf/my.cnf:/etc/mysql/conf.d/mysql.cnf:rw"
      - "${MYSQL_DIR}/data:/var/lib/mysql/:rw"
      - "${MYSQL_DIR}/logs:/var/log/mysql/:rw"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: "$TZ"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot","-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.3
  ### Redis ###
  redis:
    image: redis:7.0
    container_name: base-components-redis
    ports:
      - "${REDIS_PORT}:6379"
    expose:
      - "6379"
    volumes:
      - "${REDIS_DIR}/conf/redis.conf:/usr/local/etc/redis/redis.conf:rw"
      - "${REDIS_DIR}/data:/data/:rw"
    environment:
      TZ: "$TZ"
    command:
      - /usr/local/bin/redis-server
      - /usr/local/etc/redis/redis.conf
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.4
  ### Mongo ###
  mongo:
    image: mongo:4.4
    container_name: base-components-mongo
    volumes:
      - "${MONGO_DIR}/conf/mongod.conf:/etc/mongo/mongod.conf:rw"  
      - "${MONGO_DIR}/data:/data/db:rw"
      - "${MONGO_DIR}/logs:/var/log/mongodb:rw"
    ports:
      - "${MONGO_PORT}:27017"  
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
      TZ: "$TZ"
    command:
      - mongod
      - --config
      - /etc/mongo/mongod.conf
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.5
  ### Apollo ###
  apolloconfig:
    image: apolloconfig/apollo-configservice:2.1.0
    container_name: base-components-apolloconfig
    ports:
      - "${APOLLO_CONFIG_PORT}:8080"
    expose:
      - "8080"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://base-components-mysql:3306/ApolloConfigDB?characterEncoding=utf8&serverTimezone=Asia/Shanghai"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: "$TZ"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl" ,"-f", "http://localhost:8080"]
      interval: 5s
      timeout: 3s
      retries: 3    
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.6
  apolloadmin:
    image: apolloconfig/apollo-adminservice:2.1.0
    container_name: base-components-apolloadmin
    ports:
      - "${APOLLO_ADMIN_PORT}:8090"
    expose:
      - "8090"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://base-components-mysql:3306/ApolloConfigDB?characterEncoding=utf8&serverTimezone=Asia/Shanghai"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: "$TZ"
    depends_on:
      apolloconfig:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl" ,"-f", "http://localhost:8090"]
      interval: 5s
      timeout: 3s
      retries: 3            
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.7
  apolloportal:
    image: apolloconfig/apollo-portal:2.1.0
    container_name: base-components-apolloportal
    ports:
      - "${APOLLO_PORTAL_PORT}:8070"
    expose:
      - "8070"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://base-components-mysql:3306/ApolloPortalDB?characterEncoding=utf8&serverTimezone=Asia/Shanghai"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      APOLLO_PORTAL_ENVS: "DEV"
      DEV_META: "http://base-components-apolloconfig:8080"
      TZ: "$TZ"
    depends_on:
      apolloadmin:
        condition: service_healthy
    restart: always
    networks:
      default:
        ipv4_address: 172.17.11.8        
  ### RabbitMQ ###
  ### Consul ###
  ### Etcd ###
  ### ElasticSearch ###
  ### Kibana ###

### Networks Create ###
### docker network create --subnet=172.17.11.0/24 --gateway=172.17.11.1 --opt "com.docker.network.bridge.name"="back" back ###
networks:
  default:
    name: back
    external: true
    ipam:
      driver: default
      config:
        - subnet: 172.17.11.0/24
          gateway: 172.17.11.1 